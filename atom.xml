<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mattiafang.github.io</id>
    <title>Milano</title>
    <updated>2021-11-13T15:50:07.255Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mattiafang.github.io"/>
    <link rel="self" href="https://mattiafang.github.io/atom.xml"/>
    <subtitle>FangMattia&apos;s BLOG
 -- 温故而知新</subtitle>
    <logo>https://mattiafang.github.io/images/avatar.png</logo>
    <icon>https://mattiafang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Milano</rights>
    <entry>
        <title type="html"><![CDATA[Leetcode01 - 两数相加]]></title>
        <id>https://mattiafang.github.io/post/leetcode01-liang-shu-xiang-jia/</id>
        <link href="https://mattiafang.github.io/post/leetcode01-liang-shu-xiang-jia/">
        </link>
        <updated>2021-11-13T14:31:25.000Z</updated>
        <content type="html"><![CDATA[<p>第一想到的是双重遍历，不过会超时<br>
<img src="https://mattiafang.github.io/post-images/1636816418146.PNG" alt="" loading="lazy"></p>
<p>所以要想到哈希，要使用python中一个内置函数，代码就非常简单</p>
<pre><code class="language-python">class Solution:
    def twoSum(self, nums: List[int], target: int) -&gt; List[int]:
        hashmap = {}
        for index,num in enumerate(nums):
            another_num = target - num
            if another_num in hashmap:
                return [hashmap[another_num],index]
            hashmap[num] = index
        return None
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://mattiafang.github.io/post-images/1636813968464.PNG" alt="" loading="lazy"></figure>
<p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。<br>
<strong>语法</strong><br>
以下是 enumerate() 方法的语法:</p>
<p>enumerate(sequence, [start=0])<br>
<strong>参数</strong><br>
sequence -- 一个序列、迭代器或其他支持迭代对象。<br>
start -- 下标起始位置。<br>
<strong>返回值</strong><br>
返回 enumerate(枚举) 对象。</p>
<p><strong>实例</strong><br>
以下展示了使用 enumerate() 方法的实例：</p>
<pre><code>&gt;&gt;seasons = ['Spring', 'Summer', 'Fall', 'Winter']
&gt;&gt;list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
&gt;&gt;list(enumerate(seasons, start=1))       # 下标从 1 开始
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[A01- 数据仓库的概念与体系结构]]></title>
        <id>https://mattiafang.github.io/post/a01-shu-ju-cang-ku-de-gai-nian-yu-ti-xi-jie-gou/</id>
        <link href="https://mattiafang.github.io/post/a01-shu-ju-cang-ku-de-gai-nian-yu-ti-xi-jie-gou/">
        </link>
        <updated>2021-10-24T03:23:56.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<pre><code> 本章主要介绍了数据仓库的概念、特点、构成、分类以及数据挖掘和数据处理的基本概念。
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://mattiafang.github.io/post-images/1635087185332.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[三个神器]]></title>
        <id>https://mattiafang.github.io/post/san-ge-shen-qi/</id>
        <link href="https://mattiafang.github.io/post/san-ge-shen-qi/">
        </link>
        <updated>2021-10-23T04:39:02.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>迭代器</li>
<li>生成器</li>
<li>装饰器</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>迭代器</li>
<li>生成器</li>
<li>装饰器</li>
</ul>
<!-- more -->
<h3>迭代器</h3>
迭代是Python中用于访问序列结构数据的一种方式。
<pre><code class="language-python">for i in range(10):
    k = k + i
</code></pre>
<p>可迭代器对象是可以被for循环遍历的对象。<br><br>
可迭代对象需要实现__iter__ 或者 __getitem__方法。<br><br>
字典和列表都是可迭代对象。<br></p>
<pre><code class="language-python">l = [1,2,3,4]
l.__iter__
from collections.abc import Iterable
isinstance(list(),Iterable)
</code></pre>
<ul>
<li>
<p>迭代器是指遵循迭代器协议的对象。<br><br>
迭代器协议：实现对象的__iter__和__next__方法，其中，__iter__方法返回迭代器对象本身，next（）方法返回容器的下一个元素，在没有后续元素时抛出StopIteration异常。<br><br>
迭代对象不是迭代器。<br><br>
使用iter()获取迭代器对象。<br></p>
</li>
<li>
<p>迭代器是一个可以记住遍历位置的对象。<br><br>
迭代器对象不可逆，用next（）取下一个。<br></p>
</li>
</ul>
<h3>生成器</h3>
<ul>
<li>生成器：生成器是一类特殊的迭代器。<br></li>
<li>生成器每次在迭代时可以返回一个或多个值，它可以记录当前的状态。<br></li>
<li>生成器的创建方式：
<ul>
<li>使用yield关键字</li>
<li>使用生成器表达式（推导式）</li>
</ul>
</li>
</ul>
<pre><code class="language-python"># 推导式
G = (x*2 for x in range(5))
# yield
def fib(n):
    current = 0
    num1,num2 = 0,1
    while current &lt; n:
        num = num1
        num1,num2 = num2, num1+num2
        current += 1
        yield num
    return &quot;done&quot;
g=fib(s)
type(g)
</code></pre>
<ul>
<li>生成器可以使用next和send取值</li>
</ul>
<h3>装饰器</h3>.
<ul>
<li>闭包<br>
闭包：是由函数及其相关的引用环境组合而成的实体。<br><br>
不同编程语言实现闭包的方式不同的，Python中闭包从表现形式上看，如果在一个内部函数里，对在外部作用域（不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包。</li>
</ul>
<pre><code class="language-python">def func(x):
    def inner(y):
        return x+y
    return inner
</code></pre>
<p>闭包中不可以直接修改外部函数的局部变量。</p>
<ul>
<li>类似于不能直接在函数中修改全局变量（可变类型除外），需要使用关键字<code>nonlocal</code></li>
<li>闭包的作用：
<ul>
<li>但闭包执行完后，仍然能够保持当前的运行环境</li>
<li>闭包可以根据外部作用域的局部变量来得到不同的结果</li>
</ul>
</li>
</ul>
<pre><code class="language-python">def func1(func):
    def inner():
        print(&quot;func1&quot;)
        func()
    return inner
def func2():
    print(&quot;func2&quot;)
func1(func2)()
</code></pre>
<ul>
<li>装饰器
<ul>
<li>装饰器本质是一个python函数，它可以在不改变代码结构的情况下给代码添加新的功能。</li>
<li>装饰器的工作过程：将被装饰的函数当作参数传递给装饰器函数（名称相同的函数），并返回装饰后被装饰的函数。</li>
<li>装饰器是闭包的一种应用。</li>
<li>装饰器的使用：</li>
</ul>
</li>
</ul>
<pre><code class="language-python">@装饰器函数
def func():
    pass
</code></pre>
<ul>
<li>装饰器的作用
<ul>
<li>扩展函数功能</li>
<li>不会改变原有函数代码，但是会丢失一部分信息：被装饰函数的元信息会丢失。</li>
<li>wraps为了保留因为使用装饰器而丢失的信息，可以使用Python中本身提供的装饰器@warps来解决。</li>
</ul>
</li>
</ul>
<pre><code class="language-python">from functools import wraps
def light(func):
    print(&quot;获得神光棒*1&quot;)
    @wraps(func)
    def tiga()
        func()
        print(&quot;叮~，\n我是光之巨人&quot;)
    return tiga
@light
def person():
    &quot;&quot;&quot;我想打怪兽&quot;&quot;&quot;
    print(&quot;我是某胜利队队员大骨&quot;)
person()
help(person)
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://mattiafang.github.io/post-images/1635609652797.PNG" alt="" loading="lazy"></figure>
<ul>
<li>被装饰函数的参数
<ul>
<li>当被装饰函数拥有参数时，如何在装饰器过程中进行传递？</li>
<li>如何构建一个通用的装饰器？</li>
</ul>
</li>
</ul>
<pre><code class="language-python">from functools import wraps
def func1(func):
    @wraps(func)
    def inner(a,b):
        print(&quot;func1&quot;)
        func(a,b)
    return inner
@func1
def func2(a,b):
    print(a+b)
func2(a,b)
</code></pre>
<ul>
<li>带有参数的装饰器
<ul>
<li>如何通过装饰器的参数来控制装饰器？</li>
<li>通过外部参数，返回一个装饰器</li>
</ul>
</li>
</ul>
<pre><code class="language-python">def Decorator(name = None,level=&quot;普通会员&quot;)
    def outer(func):
        def inner(name):
            print(&quot;欢迎登录，%s&quot;% level)
            func(name)
        return inner
    return outer
@Decorator(level = &quot;SVIP&quot;)
def func(name):
    print(name)
func(&quot;张三&quot;)
</code></pre>
<ul>
<li>装饰器与类
<ul>
<li>装饰器不仅可以是函数，还可以是类（同样，装饰器不仅可以装饰函数，还可以装饰类）</li>
<li>装饰器装饰类</li>
</ul>
</li>
</ul>
<pre><code class="language-python">def singleton(cls,*args,**kw):
    instance={}
    def _singleton():
        if cls not in instance:
            instance[cls] = cls(*args,**kw)
        return instance[cls]
    return _singleton
@singleton
class Singleton(object):
    def __init__(self):
        self.num_sum = 0
    def add(self):
        self.num_sum=100
</code></pre>
<ul>
<li>将装饰器定义为类的形式。</li>
<li><strong>call</strong>:魔法方法，可以让类像方法一样被调用。</li>
</ul>
<pre><code class="language-python">import time
class Wrapper():
    def __init__(self,func):
        self.func = func
    def __call__(self,*args,**kwargs):
        start = time.time()
        result = self.func(*args,**kwargs)
        end = time.time()
        print(end - start)
        return result
@Warpper
def func(num):
    time.sleep(3)
    return num
func(1)
</code></pre>
<ul>
<li>多个装饰器</li>
</ul>
<pre><code class="language-python">def Tiga(func):
    print(&quot;给我力量吧，Tiga&quot;)
    def tiga():
        func()
        print(&quot;获得Tiga的力量&quot;)
    return tiga
def Dyna(func):
    print(&quot;给我力量吧，Dyna&quot;)
    def dyna()
        func()
        print(&quot;获得Dyna的力量&quot;)
    return dyna
def Gaia(func):
    print(&quot;给我力量吧，Gaia&quot;)
    def gaia():
        func()
        print(&quot;获得Gaia的力量&quot;)
    return gaia

@Tiga
@Dyna
@Gaia
def Z():
    print(&quot;变身&quot;)
Z()

# 给我力量吧，Gaia
# 给我力量吧，Dyna
# 给我力量吧，Tiga
# 变身
# 获得Gaia的力量
# 获得Dyna的力量
# 获得Tiga的力量
</code></pre>
<ul>
<li>解除装饰器</li>
</ul>
<pre><code class="language-python">def light(func):
    print(&quot;获得神光棒*1&quot;)
    @wraps(func)
    def tiga():
        func()
        print(&quot;叮~，我是光之巨人&quot;)
    return tiga
@light
def person():
    print(&quot;我是某胜利队队员大骨&quot;)
person()
DaGu = person.__wrapped__
DaGU()
# 我是某胜利队队员大骨    
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[再遇Jupyter]]></title>
        <id>https://mattiafang.github.io/post/zai-yu-jupyter/</id>
        <link href="https://mattiafang.github.io/post/zai-yu-jupyter/">
        </link>
        <updated>2021-10-18T14:59:10.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="1-简介">1. 简介</h2>
<pre><code>Jupyter Notebook是基于网页的用于交互计算的应用程序。
其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。
——Jupyter Notebook官方介绍
</code></pre>
<p>简而言之，Jupyter Notebook是以网页的形式打开，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。<br>
在实际的运用上，对数据的灵活操作处理，Jupyter这种交互性很强的编译器能展示出比较好的优势。</p>
<h2 id="2-组成形式">2、组成形式</h2>
<p>① 网页应用<br>
网页应用即基于网页形式的、结合了编写说明文档、数学公式、交互计算和其他富媒体形式的工具。简言之，网页应用是可以实现各种功能的工具。<br>
② 文档<br>
即Jupyter Notebook中所有交互计算、编写说明文档、数学公式、图片以及其他富媒体形式的输入和输出，都是以文档的形式体现的。<br>
这些文档是保存为后缀名为.ipynb的JSON格式文件，不仅便于版本控制，也方便与他人共享。<br>
此外，文档还可以导出为：HTML、LaTeX、PDF等格式。</p>
<h3 id="3-jupyter-notebook的主要特点">3、 Jupyter Notebook的主要特点</h3>
<ul>
<li>编程时具有语法高亮、缩进、tab补全的功能。</li>
<li>可直接通过浏览器运行代码，同时在代码块下方展示运行结果。</li>
<li>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</li>
<li>对代码编写说明文档或语句时，支持Markdown语法。</li>
<li>支持使用LaTeX编写数学性说明。</li>
</ul>
<h3 id="4-安装">4、安装</h3>
<ul>
<li>安装Jupyter Notebook的前提是需要安装了Python（3.3版本及以上）<br>
1、如果已经安装Anconda的同学，恭喜你，很容易就操作，前两个就是。<br>
<img src="https://mattiafang.github.io/post-images/1634571288375.PNG" alt="" loading="lazy"></li>
</ul>
<p>2、如果没有安装的同学，直接pip安装。（启动命令行中输入 jupyter notebook）<br>
pip install jupyter</p>
<p>如果你足够幸运，那么你将看到如下界面，就可以开始体验啦。<br>
<img src="https://mattiafang.github.io/post-images/1634571661972.PNG" alt="主界面" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://mattiafang.github.io/post-images/1634571676338.PNG" alt="编辑页面" loading="lazy"></figure>
<h3 id="5-jupyter-notebook快捷键">5、Jupyter notebook快捷键</h3>
<p>① 查看快捷键<br>
① 进入Jupyter Notebook主界面“File”中。<br>
② 在“New”的下拉列表中选择环境创建一个笔记本。<br>
③ 点击“Help”。<br>
④ 点击“Keyboard Shortcuts”。</p>
<p><img src="https://mattiafang.github.io/post-images/1634572461846.PNG" alt="" loading="lazy"><br>
<img src="https://mattiafang.github.io/post-images/1634572469610.PNG" alt="" loading="lazy"></p>
<p>左侧颜色判断区块模式<br>
<img src="https://mattiafang.github.io/post-images/1634572511409.PNG" alt="" loading="lazy"><br>
<img src="https://mattiafang.github.io/post-images/1634572663702.PNG" alt="" loading="lazy"><br>
绿色是编辑模式，蓝色是命令模式</p>
<h3 id="参考资料">参考资料</h3>
<p>https://www.jianshu.com/p/91365f343585</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[截图小能手（Win10）]]></title>
        <id>https://mattiafang.github.io/post/dian-nao-shi-yong-ji-qiao-win10/</id>
        <link href="https://mattiafang.github.io/post/dian-nao-shi-yong-ji-qiao-win10/">
        </link>
        <updated>2021-10-16T07:59:57.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="-截图">- 截图</h2>
<h3 id="1-win10截屏工具可设置快捷键如ctrlaltp">1、win10截屏工具（可设置快捷键，如<code>ctrl</code>+<code>alt</code>+<code>P</code>）</h3>
<figure data-type="image" tabindex="1"><img src="https://mattiafang.github.io/post-images/1634371339093.png" alt="" loading="lazy"></figure>
<h3 id="2-win10-快捷键">2、win10 快捷键</h3>
<ul>
<li>按<code>prt scr</code>键，就会获取当前屏幕并存储在剪贴板上</li>
<li>当前画面全屏截图（<code>win</code>+<code>prt scr</code>），存储在“此电脑-视频-捕获”目录下</li>
<li>当前活动窗口全屏截图（<code>win</code>+<code>alt</code>+<code>prt scr</code>）,存储在“此电脑-视频-捕获”目录下</li>
<li>按<code>win</code>+<code>Shift</code>+<code>S</code>组合键进入截屏模式，鼠标左键选择可截屏区域</li>
<li>按<code>win</code>+<code>W</code>组合键，打开window Ink工作区，第三项是屏幕草图功能</li>
</ul>
<p>选择其中一种适合自己的就好😊</p>
<h2 id="-未完待续">-未完待续</h2>
<p>重在积累 📝</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://mattiafang.github.io/post/hello-gridea/</id>
        <link href="https://mattiafang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>